import { NextResponse } from 'next/server';
import { sendSMS } from '@/lib/database';
import nodemailer from 'nodemailer';

export async function GET() {
    const results = {
        gmail: { configured: false, tested: false, error: null as string | null },
        twilio: { configured: false, tested: false, error: null as string | null },
        environment: process.env.NODE_ENV
    };

    // Gmail —Ç–æ—Ö–∏—Ä–≥–æ–æ —à–∞–ª–≥–∞—Ö
    const gmailUser = process.env.GMAIL_USER;
    const gmailPassword = process.env.GMAIL_APP_PASSWORD;

    if (gmailUser && gmailPassword) {
        results.gmail.configured = true;

        try {
            const transporter = nodemailer.createTransport({
                service: 'gmail',
                auth: {
                    user: gmailUser,
                    pass: gmailPassword,
                },
            });

            await transporter.verify();
            results.gmail.tested = true;
        } catch (error) {
            results.gmail.error = error instanceof Error ? error.message : 'Gmail —Ç–æ—Ö–∏—Ä–≥–æ–æ–Ω—ã –∞–ª–¥–∞–∞';
        }
    }

    // Twilio —Ç–æ—Ö–∏—Ä–≥–æ–æ —à–∞–ª–≥–∞—Ö
    const twilioSid = process.env.TWILIO_ACCOUNT_SID;
    const twilioToken = process.env.TWILIO_AUTH_TOKEN;
    const twilioVerifySid = process.env.TWILIO_VERIFY_SERVICE_SID;

    if (twilioSid && twilioToken && twilioVerifySid) {
        results.twilio.configured = true;

        try {
            // Twilio client —Ç–µ—Å—Ç
            const twilio = await import('twilio');
            const client = twilio.default(twilioSid, twilioToken);

            // Service-–∏–π–≥ —à–∞–ª–≥–∞—Ö
            await client.verify.v2.services(twilioVerifySid).fetch();
            results.twilio.tested = true;
        } catch (error) {
            results.twilio.error = error instanceof Error ? error.message : 'Twilio —Ç–æ—Ö–∏—Ä–≥–æ–æ–Ω—ã –∞–ª–¥–∞–∞';
        }
    }

    return NextResponse.json({
        success: true,
        message: '–¢–æ—Ö–∏—Ä–≥–æ–æ–Ω—ã —à–∞–ª–≥–∞–ª—Ç',
        data: results
    });
}

// POST —Ç–µ—Å—Ç –∏–º—ç–π–ª –∏–ª–≥—ç—ç—Ö
export async function POST(request: Request) {
    try {
        const { email, phone, action } = await request.json();

        if (action === 'test-email' && email) {
            const gmailUser = process.env.GMAIL_USER;
            const gmailPassword = process.env.GMAIL_APP_PASSWORD;

            if (!gmailUser || !gmailPassword) {
                return NextResponse.json({
                    success: false,
                    message: 'Gmail —Ç–æ—Ö–∏—Ä–≥–æ–æ –¥—É—Ç—É—É –±–∞–π–Ω–∞'
                });
            }

            const transporter = nodemailer.createTransport({
                service: 'gmail',
                auth: {
                    user: gmailUser,
                    pass: gmailPassword,
                },
            });

            const mailOptions = {
                from: `"Setgel-Zui Test" <${gmailUser}>`,
                to: email,
                subject: 'üìß –¢–µ—Å—Ç –ò–º—ç–π–ª - Setgel-Zui',
                html: `
                    <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
                        <h2>üéØ –¢–µ—Å—Ç –ò–º—ç–π–ª –ê–º–∂–∏–ª—Ç—Ç–∞–π!</h2>
                        <p>–≠–Ω—ç –Ω—å Gmail —Ç–æ—Ö–∏—Ä–≥–æ–æ–Ω—ã —Ç–µ—Å—Ç –∏–º—ç–π–ª —é–º.</p>
                        <p><strong>–•—É–≥–∞—Ü–∞–∞:</strong> ${new Date().toLocaleString('mn-MN')}</p>
                        <p><strong>–°–∏—Å—Ç–µ–º–∏–π–Ω —Ç”©–ª”©–≤:</strong> –•—ç–≤–∏–π–Ω –∞–∂–∏–ª–ª–∞–∂ –±–∞–π–Ω–∞ ‚úÖ</p>
                    </div>
                `
            };

            await transporter.sendMail(mailOptions);

            return NextResponse.json({
                success: true,
                message: '–¢–µ—Å—Ç –∏–º—ç–π–ª –∞–º–∂–∏–ª—Ç—Ç–∞–π –∏–ª–≥—ç—ç–≥–¥–ª—ç—ç!'
            });
        }

        if (action === 'test-sms' && phone) {
            const success = await sendSMS(phone, '–¢–µ—Å—Ç SMS - Setgel-Zui —Å–∏—Å—Ç–µ–º–∏–π–Ω —à–∞–ª–≥–∞–ª—Ç');

            return NextResponse.json({
                success,
                message: success ? '–¢–µ—Å—Ç SMS –∏–ª–≥—ç—ç–≥–¥–ª—ç—ç!' : 'SMS –∏–ª–≥—ç—ç—Ö—ç–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞'
            });
        }

        return NextResponse.json({
            success: false,
            message: '–ë—É—Ä—É—É –ø–∞—Ä–∞–º–µ—Ç—Ä'
        });

    } catch (error) {
        return NextResponse.json({
            success: false,
            message: '–ê–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞: ' + (error instanceof Error ? error.message : '–¢–æ–¥–æ—Ä—Ö–æ–π–≥“Ø–π –∞–ª–¥–∞–∞')
        });
    }
}