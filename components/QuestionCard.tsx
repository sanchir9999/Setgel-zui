"use client";

import * as React from "react";
import type { Question } from "../lib/questions";

type Props = {
    q: Question;
    value?: number;
    onChange: (v: number) => void;
};

// –ê—Å—É—É–ª—Ç—ã–Ω –±“Ø–ª–≥—ç—ç—Ä —Ç–∞–π–ª–±–∞—Ä—É—É–¥
function getLabels(q: Question): Record<number, string> {
    if (q.id.startsWith("S")) {
        // –°—Ç—Ä–µ—Å—Å–∏–π–Ω —Ç“Ø–≤—à–∏–Ω 0‚Äì4
        return {
            0: "–û–≥—Ç “Ø–≥“Ø–π üòå",
            1: "–•–∞–∞—è–∞ üôÇ",
            2: "–ó–∞—Ä–∏–º–¥–∞–∞ üòê",
            3: "–ò—Ö—ç–≤—á–ª—ç–Ω üòü",
            4: "–ú–∞—à –æ–ª–æ–Ω—Ç–æ–æ üò∞",
        };
    }
    if (q.id.startsWith("H")) {
        // –°—ç—Ç–≥—ç–ª —Ö–∞–Ω–∞–º–∂–∏–π–Ω —Ç“Ø–≤—à–∏–Ω 1‚Äì7
        return {
            1: "–û–≥—Ç “Ø–≥“Ø–π üòî",
            2: "–ë–∞—Ä–∞–≥ “Ø–≥“Ø–π üòï",
            3: "–ë–∞–≥–∞ –∑—ç—Ä—ç–≥ üòê",
            4: "–î—É–Ω–¥ –∑—ç—Ä—ç–≥ üôÇ",
            5: "–ù—ç–ª—ç—ç–¥ –∏—Ö üòä",
            6: "–ò—Ö üòÑ",
            7: "–ú–∞—à –∏—Ö üòç",
        };
    }
    // –≠–º–æ—Ü–∏–æ–Ω–∞–ª –æ—é—É–Ω —É—Ö–∞–∞–Ω—ã —Ç“Ø–≤—à–∏–Ω 1‚Äì5
    return {
        1: "–û–≥—Ç “Ø–≥“Ø–π üòû",
        2: "–ë–∞–≥–∞ –∑—ç—Ä—ç–≥ üòê",
        3: "–î—É–Ω–¥ –∑—ç—Ä—ç–≥ üôÇ",
        4: "–ò—Ö üòä",
        5: "–ú–∞—à –∏—Ö üòÑ",
    };
}

export default function QuestionCard({ q, value, onChange }: Props) {
    const labels = getLabels(q);

    // scaleMin..scaleMax –±“Ø—Ö —É—Ç–≥—É—É–¥
    const options = React.useMemo(() => {
        const arr: number[] = [];
        for (let v = q.scaleMin; v <= q.scaleMax; v++) arr.push(v);
        return arr;
    }, [q.scaleMin, q.scaleMax]);

    return (
        <div className="p-4">
            {/* –ê—Å—É—É–ª—Ç—ã–Ω —Ç–µ–∫—Å—Ç */}
            <div className="text-center">
                <h2 className="text-lg font-semibold text-gray-900 dark:text-gray-100">{q.text}</h2>
            </div>

            {/* –•–∞—Ä–∏—É–ª—Ç—ã–Ω —Ö—ç—Å—ç–≥ */}
            <div className="mt-4">
                <div className="flex items-center justify-between text-xs text-gray-500 mb-3">
                    <span>–ë–∞–≥–∞</span>
                    <span>–ò—Ö</span>
                </div>

                <div className="flex gap-2 justify-center">
                    {options.map((v) => {
                        const selected = value === v;
                        return (
                            <button
                                key={v}
                                type="button"
                                onClick={() => onChange(v)}
                                aria-label={`${v}: ${labels[v] ?? ""}`}
                                className={
                                    "h-10 w-10 rounded-full flex items-center justify-center text-sm font-medium transition-transform " +
                                    (selected
                                        ? "bg-black text-white dark:bg-white dark:text-black border-0"
                                        : "bg-white border border-gray-200 text-gray-700 dark:bg-zinc-900 dark:border-zinc-700 dark:text-gray-300")
                                }
                            >
                                {v}
                            </button>
                        );
                    })}
                </div>

                <div className="mt-4 text-center text-sm text-gray-600 dark:text-gray-400">
                    {value !== undefined ? labels[value] : "–•–∞—Ä–∏—É–ª—Ç–∞–∞ —Å–æ–Ω–≥–æ–Ω–æ —É—É"}
                </div>
            </div>
        </div>
    );
}
