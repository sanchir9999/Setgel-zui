// Database connection and schema definitions
import twilio from 'twilio';

// –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –±“Ø—Ç—ç—Ü
export interface User {
    id: string;
    phone: string;
    email: string;
    createdAt: Date;
    updatedAt: Date;
    isVerified: boolean;
}

// –ë–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞—Ö –∫–æ–¥—ã–Ω –±“Ø—Ç—ç—Ü
export interface VerificationCode {
    id: string;
    phone: string;
    code: string;
    expiresAt: Date;
    isUsed: boolean;
    createdAt: Date;
}

// –¢–µ—Å—Ç–∏–π–Ω “Ø—Ä –¥“Ø–Ω–≥–∏–π–Ω –±“Ø—Ç—ç—Ü
export interface TestResult {
    id: string;
    userId: string;
    totalScore: number;
    maxScore: number;
    answers: number[];
    advice: string;
    completedAt: Date;
}

// –û–¥–æ–æ–≥–∏–π–Ω —Ö—É–≤—å–¥ —Ñ–∞–π–ª—ã–Ω —Å–∏—Å—Ç–µ–º–¥ —Ö–∞–¥–≥–∞–ª–Ω–∞ (—Å—É—Ä–≥–∞–ª—Ç—ã–Ω –∑–æ—Ä–∏–ª–≥–æ–æ—Ä)
// –ë–æ–¥–∏—Ç –∞—à–∏–≥–ª–∞–ª—Ç—ã–Ω —Ö—É–≤—å–¥ PostgreSQL, MongoDB –≥—ç—Ö –º—ç—Ç database –∞—à–∏–≥–ª–∞—Ö
const users: User[] = [];
const verificationCodes: VerificationCode[] = [];
const testResults: TestResult[] = [];

export const db = {
    users: {
        create: async (userData: Omit<User, 'id' | 'createdAt' | 'updatedAt'>): Promise<User> => {
            const user: User = {
                id: generateId(),
                ...userData,
                createdAt: new Date(),
                updatedAt: new Date(),
            };
            users.push(user);
            return user;
        },

        findByPhone: async (phone: string): Promise<User | null> => {
            return users.find(u => u.phone === phone) || null;
        },

        findByEmail: async (email: string): Promise<User | null> => {
            return users.find(u => u.email === email) || null;
        },

        updateVerification: async (userId: string, isVerified: boolean): Promise<User | null> => {
            const userIndex = users.findIndex(u => u.id === userId);
            if (userIndex === -1) return null;

            users[userIndex].isVerified = isVerified;
            users[userIndex].updatedAt = new Date();
            return users[userIndex];
        }
    },

    verificationCodes: {
        create: async (codeData: Omit<VerificationCode, 'id' | 'createdAt'>): Promise<VerificationCode> => {
            // ”®–º–Ω”©—Ö –∫–æ–¥—É—É–¥—ã–≥ —É—Å—Ç–≥–∞—Ö
            const indicesToRemove: number[] = [];
            for (let i = verificationCodes.length - 1; i >= 0; i--) {
                const vc = verificationCodes[i];
                if (vc.phone === codeData.phone && !vc.isUsed && vc.expiresAt >= new Date()) {
                    indicesToRemove.push(i);
                }
            }
            indicesToRemove.forEach(index => verificationCodes.splice(index, 1));

            const verificationCode: VerificationCode = {
                id: generateId(),
                ...codeData,
                createdAt: new Date(),
            };
            verificationCodes.push(verificationCode);
            return verificationCode;
        },

        findValidCode: async (phone: string, code: string): Promise<VerificationCode | null> => {
            return verificationCodes.find(
                vc => vc.phone === phone &&
                    vc.code === code &&
                    !vc.isUsed &&
                    vc.expiresAt > new Date()
            ) || null;
        },

        markAsUsed: async (id: string): Promise<void> => {
            const codeIndex = verificationCodes.findIndex(vc => vc.id === id);
            if (codeIndex !== -1) {
                verificationCodes[codeIndex].isUsed = true;
            }
        }
    },

    testResults: {
        create: async (resultData: Omit<TestResult, 'id' | 'completedAt'>): Promise<TestResult> => {
            const testResult: TestResult = {
                id: generateId(),
                ...resultData,
                completedAt: new Date(),
            };
            testResults.push(testResult);
            return testResult;
        },

        findByUser: async (userId: string): Promise<TestResult[]> => {
            return testResults.filter(tr => tr.userId === userId);
        }
    }
};

// ID “Ø“Ø—Å–≥—ç—Ö —Ñ—É–Ω–∫—Ü
function generateId(): string {
    return Date.now().toString() + Math.random().toString(36).substr(2, 9);
}

// SMS –∏–ª–≥—ç—ç—Ö —Ñ—É–Ω–∫—Ü
export async function sendSMS(phone: string, message?: string): Promise<boolean> {
    console.log(`üì± SMS to ${phone}`);

    // Twilio —Ç–æ—Ö–∏—Ä–≥–æ–æ–Ω—É—É–¥
    const accountSid = process.env.TWILIO_ACCOUNT_SID;
    const authToken = process.env.TWILIO_AUTH_TOKEN;
    const verifyServiceSid = process.env.TWILIO_VERIFY_SERVICE_SID;

    // –•—ç—Ä—ç–≤ Twilio —Ç–æ—Ö–∏—Ä–≥–æ–æ –¥—É—Ç—É—É –±–æ–ª fallback —Ä“Ø“Ø —à–∏–ª–∂–∏—Ö
    if (!accountSid || !authToken || !verifyServiceSid) {
        console.log('‚ö†Ô∏è Twilio Verify —Ç–æ—Ö–∏—Ä–≥–æ–æ –¥—É—Ç—É—É –±–∞–π–Ω–∞. Fallback —Ä“Ø“Ø —à–∏–ª–∂–¥—ç–∂ –±–∞–π–Ω–∞.');

        // Fallback –∑–æ—Ä–∏–ª–≥–æ–æ—Ä manual –∫–æ–¥ “Ø“Ø—Å–≥—ç—Ö
        if (message) {
            // –ú–æ–Ω–≥–æ–ª—ã–Ω SMS API (Skytel –∂–∏—à—ç—ç) —ç—Å–≤—ç–ª –±—É—Å–∞–¥ API
            const mongolianSMS = await sendMongolianSMS(phone, message);
            if (mongolianSMS) return true;

            console.log(`Fallback –∫–æ–Ω—Å–æ–ª SMS: ${phone} ‚Üí ${message}`);
        }

        return false; // Fallback –∞–º–∂–∏–ª—Ç–≥“Ø–π –±–æ–ª false –±—É—Ü–∞–∞—Ö
    }

    try {
        const client = twilio(accountSid, authToken);

        // –ú–æ–Ω–≥–æ–ª—ã–Ω —É—Ç–∞—Å–Ω—ã –¥—É–≥–∞–∞—Ä—ã–≥ –æ–ª–æ–Ω —É–ª—Å—ã–Ω —Ñ–æ—Ä–º–∞—Ç—Ä—É—É —Ö”©—Ä–≤“Ø“Ø–ª—ç—Ö (+976)
        let formattedPhone = phone;
        if (!phone.startsWith('+')) {
            if (phone.length === 8) {
                formattedPhone = '+976' + phone;
            }
        }

        // Verify Service –∞—à–∏–≥–ª–∞–∂ –∞–≤—Ç–æ–º–∞—Ç SMS –∏–ª–≥—ç—ç—Ö (–∑”©–≤—Ö”©–Ω –Ω—ç–≥ —É–¥–∞–∞)
        const verification = await client.verify.v2.services(verifyServiceSid)
            .verifications
            .create({ to: formattedPhone, channel: 'sms' });

        console.log(`‚úÖ Twilio Verify SMS –∏–ª–≥—ç—ç–≥–¥–ª—ç—ç: ${formattedPhone}`);
        console.log(`Verification SID: ${verification.sid}`);
        return true;

    } catch (error) {
        console.error('‚ùå Twilio –∞–ª–¥–∞–∞:', error);

        // –ê–ª–¥–∞–∞ –≥–∞—Ä–≤–∞–ª fallback manual SMS
        if (message) {
            const mongolianSMS = await sendMongolianSMS(phone, message);
            if (mongolianSMS) return true;

            console.log(`Fallback SMS: ${phone} ‚Üí ${message}`);
        }

        return false; // –ë“Ø—Ö –∞—Ä–≥–∞ –∞–º–∂–∏–ª—Ç–≥“Ø–π –±–æ–ª false
    }
}

// –ú–æ–Ω–≥–æ–ª—ã–Ω SMS API (Skytel, Unitel, Mobicom –≥—ç—Ö –º—ç—Ç)
async function sendMongolianSMS(phone: string, message: string): Promise<boolean> {
    try {
        // Skytel SMS API –∂–∏—à—ç—ç (API key —à–∞–∞—Ä–¥–ª–∞–≥–∞—Ç–∞–π)
        const skytelApiKey = process.env.SKYTEL_API_KEY;
        const skytelUsername = process.env.SKYTEL_USERNAME;

        if (skytelApiKey && skytelUsername) {
            const response = await fetch('https://api.skytel.mn/v1/sms/send', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${skytelApiKey}`
                },
                body: JSON.stringify({
                    username: skytelUsername,
                    phone: phone,
                    message: message
                })
            });

            if (response.ok) {
                console.log(`‚úÖ Skytel SMS –∏–ª–≥—ç—ç–≥–¥–ª—ç—ç: ${phone}`);
                return true;
            }
        }

        // –ë—É—Å–∞–¥ –ú–æ–Ω–≥–æ–ª—ã–Ω –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É—É–¥ —ç–Ω–¥ –Ω—ç–º–∂ –±–æ–ª–Ω–æ
        console.log('‚ö†Ô∏è –ú–æ–Ω–≥–æ–ª—ã–Ω SMS API —Ç–æ—Ö–∏—Ä–≥–æ–æ –±–∞–π—Ö–≥“Ø–π');
        return false;

    } catch (error) {
        console.error('‚ùå –ú–æ–Ω–≥–æ–ª—ã–Ω SMS –∞–ª–¥–∞–∞:', error);
        return false;
    }
}

// Twilio Verify Service –∫–æ–¥ –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞—Ö —Ñ—É–Ω–∫—Ü
export async function verifyTwilioCode(phone: string, code: string): Promise<{ success: boolean; message: string }> {
    const accountSid = process.env.TWILIO_ACCOUNT_SID;
    const authToken = process.env.TWILIO_AUTH_TOKEN;
    const verifyServiceSid = process.env.TWILIO_VERIFY_SERVICE_SID;

    if (!accountSid || !authToken || !verifyServiceSid) {
        return { success: false, message: 'Twilio —Ç–æ—Ö–∏—Ä–≥–æ–æ –¥—É—Ç—É—É –±–∞–π–Ω–∞' };
    }

    try {
        const client = twilio(accountSid, authToken);

        // –ú–æ–Ω–≥–æ–ª—ã–Ω —É—Ç–∞—Å–Ω—ã –¥—É–≥–∞–∞—Ä—ã–≥ –æ–ª–æ–Ω —É–ª—Å—ã–Ω —Ñ–æ—Ä–º–∞—Ç—Ä—É—É —Ö”©—Ä–≤“Ø“Ø–ª—ç—Ö (+976)
        let formattedPhone = phone;
        if (!phone.startsWith('+')) {
            if (phone.length === 8) {
                formattedPhone = '+976' + phone;
            }
        }

        const verificationCheck = await client.verify.v2.services(verifyServiceSid)
            .verificationChecks
            .create({ to: formattedPhone, code: code });

        if (verificationCheck.status === 'approved') {
            console.log(`‚úÖ Twilio Verify –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞–ª—Ç –∞–º–∂–∏–ª—Ç—Ç–∞–π: ${formattedPhone}`);
            return { success: true, message: '–ö–æ–¥ –∑”©–≤ –±–∞–π–Ω–∞' };
        } else {
            console.log(`‚ùå Twilio Verify –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞–ª—Ç –∞–º–∂–∏–ª—Ç–≥“Ø–π: ${verificationCheck.status}`);
            return { success: false, message: '–ö–æ–¥ –±—É—Ä—É—É —ç—Å–≤—ç–ª —Ö—É–≥–∞—Ü–∞–∞ –¥—É—É—Å—Å–∞–Ω' };
        }

    } catch (error) {
        console.error('‚ùå Twilio Verify –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞—Ö –∞–ª–¥–∞–∞:', error);
        return { success: false, message: '–ë–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞—Ö–∞–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞' };
    }
}

// 6 –æ—Ä–æ–Ω—Ç–æ–π —Å–∞–Ω–∞–º—Å–∞—Ä–≥“Ø–π –∫–æ–¥ “Ø“Ø—Å–≥—ç—Ö (Fallback –∑–æ—Ä–∏–ª–≥–æ–æ—Ä)
export function generateVerificationCode(): string {
    return Math.floor(100000 + Math.random() * 900000).toString();
}